// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax frontLeftMotor;
private CANSparkMax frontRightMotor;
private CANSparkMax backLeftMotor;
private CANSparkMax backRightMotor;
private MecanumDrive mecanumDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Joystick m_joystickDriver;
    
    /**
    *
    */
    public Drive(Joystick joystickDriver) {
        m_joystickDriver = joystickDriver;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontLeftMotor = new CANSparkMax(1, MotorType.kBrushless);
//  addChild("frontLeftMotor",frontLeftMotor);
 frontLeftMotor.setInverted(false);

frontRightMotor = new CANSparkMax(0, MotorType.kBrushless);
//  addChild("frontRightMotor",frontRightMotor);
 frontRightMotor.setInverted(false);

backLeftMotor = new CANSparkMax(2, MotorType.kBrushless);
//  addChild("backLeftMotor",backLeftMotor);
 backLeftMotor.setInverted(false);

backRightMotor = new CANSparkMax(3, MotorType.kBrushless);
//  addChild("backRightMotor",backRightMotor);
 backRightMotor.setInverted(false);

mecanumDrive1 = new MecanumDrive(frontLeftMotor, backLeftMotor,
frontRightMotor, backRightMotor);
 addChild("Mecanum Drive 1",mecanumDrive1);
 mecanumDrive1.setSafetyEnabled(true);
mecanumDrive1.setExpiration(0.1);
mecanumDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void cartesianDrive(double yValue, double xValue, double zValue){
         yValue = m_joystickDriver.getY();
         xValue = m_joystickDriver.getX();
         zValue = m_joystickDriver.getZ();
        mecanumDrive1.driveCartesian(yValue, xValue, zValue);
    }

}

